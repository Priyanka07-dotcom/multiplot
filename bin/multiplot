#!/usr/bin/env python

import os
import numpy as np
import matplotlib
import matplotlib.pyplot as plt
import matplotlib.cm as cm
import pygeo.segyread as segyread
import pygeo.rsfread as rsfread
# import rsf.input

# ------------------------------------------------------------------------
# Settings

AUTHORSHIP = 'Brendan Smithyman, November 2012'
VERSION = '%prog v1.0\n'
DESCRIPTION = '''
General-purpose plotting program for seismic images.
'''

defaulttype = '.sgy'
defaultfile = '.plotdefaults'

maxsize = 104857600

# Option defaults
optdefaults = {
			'verbose':	 False,
			'ratio':	 'auto',
			'cmap': 	'jet',
			'clip': 	None,
			'extent': 	None,
			'bar': 		'vertical',
			'fontsize': 	matplotlib.rcParams['font.size'],
			'xlabel': 	'',
			'zlabel': 	'',
			'cblabel': 	'',
			'title': 	'',
			'type':		'image',
			'clevels':	5,
			'ccolour':	None,
}

# ------------------------------------------------------------------------
# Functions

def read_su (infile):
  '''
  Helper function to read Seismic Unix files.
  '''

  sf = segyread.SEGYFile(infile, isSU=True)
  return sf[:]

def read_sgy (infile):
  '''
  Helper function to read SEG-Y files.
  '''

  sf = segyread.SEGYFile(infile)
  return sf[:]

def read_rsf (infile):
  '''
  Helper function to read RSF files.
  '''

  return rsfread.RSFFile(infile)

def modify_contour_args (thekwargs):
  '''
  Modifies the plotting options for a contour plot.
  '''

  contour_kwargs = thekwargs.copy()

  if (options.ccolour):
    contour_kwargs['colors'] = options.ccolour

  for item in ['cmap', 'vmin', 'vmax']:
    del contour_kwargs[item]

  return contour_kwargs

def combined_plot (*args, **kwargs):
  '''
  Generates an image plot with contours overlaid.
  '''

  contour_kwargs = modify_contour_args(kwargs)

  plt.contour(*args, **contour_kwargs)
  plt.imshow(args[0], **kwargs)

# Dictionary to map file extensions to input filters
read_mapping = {
	'.su': read_su,
	'.rsf': read_rsf,
	'.sgy': read_sgy,
}

# Dictionary to map plot types to functions
plotfunc_mapping = {
	'image': plt.imshow,
	'contour': plt.contour,
	'both': combined_plot,
}

# ------------------------------------------------------------------------
# Parameter parsing

from optparse import OptionParser

usage = '%prog [options] [projectname]'

parser = OptionParser(usage       = usage,
                      version     = VERSION,
                      description = DESCRIPTION)

parser.add_option('-v', '--verbose', action='store_true', dest='verbose',
		help='display additional information')

parser.add_option('-r', '--ratio', action='store', dest='ratio',
		help='set aspect ratio [%default]')

parser.add_option('-m', '--cmap', action='store', dest='cmap',
		help='choose colour scale [%default]')

parser.add_option('-c', '--clip', action='store', dest='clip',
		help='set minimum/maximum values for plot')

parser.add_option('-e', '--extent', action='store', dest='extent',
		help='set plot axes ranges')

parser.add_option('-b', '--bar', action='store', dest='bar',
		help='type of colour bar [%default]')

parser.add_option('-f', '--fontsize', action='store', dest='fontsize',
		help='font size for labels [%default]')

parser.add_option('-x', '--xlabel', action='store', dest='xlabel',
		help='label for x axis [\'%default\']')

parser.add_option('-z', '--zlabel', action='store', dest='zlabel',
		help='label for z axis [\'%default\']')

parser.add_option('-k', '--cblabel', action='store', dest='cblabel',
		help='label for colour bar [\'%default\']')

parser.add_option('-t', '--title', action='store', dest='title',
		help='title for plot [\'%default\']')

parser.add_option('-y', '--type', action='store', dest='type',
		help='type of plot [%default]')

parser.add_option('-l', '--clevels', action='store', dest='clevels',
		help='number of contours for contour plot [%default]')

parser.add_option('-u', '--ccolour', action='store', dest='ccolour',
		help='fixed colour for contours; you may use a letter code (matplotlib), greyscale level 0 < u < 1, or hex (HTML) colour code [%default]')

# Open settings from default settings file and update baked-in defaults
if (os.path.isfile(defaultfile)):
  with open(defaultfile, 'r') as fp:
    optdict = dict(line.strip().split(None, 1) for line in fp if len(line.strip().split()) >= 2)

  optdefaults.update(optdict)

# Set defaults for OptionParser and parse the arguments
parser.set_defaults(**optdefaults)

(options, args) = parser.parse_args()

# ------------------------------------------------------------------------
# Main Program

plotopts = {
	'origin': 'lower',
}

# Check for at least one argument and set input file
if (len(args) == 0):
  parser.error('Please specify an input filename!')

infile = args[0]

if (not os.path.isfile(infile)):
  parser.error('File \'%s\' does not exist!'%(infile,))

# Determine extension (for input format detection)
extension = os.path.splitext(infile)[1]

# Attempt to use a specific filter based on the extension
try:
  if (os.path.getsize(infile) > maxsize):
    parser.error('File exceeds maximum size!')

  im = read_mapping[extension](infile)

# Fall back to the default input filter
except KeyError:
  im = read_mapping[defaulttype](infile)

# Test to see if specified colour map exists
try:
  plotopts['cmap'] = cm.__dict__[options.cmap]
except KeyError:
  parser.errro('Colour map \'%s\' does not exist!'%(options.cmap,))

# Handle clipping (default to shrink-wrap around image bounds)
if (options.clip is None):
  plotopts['vmin'] = im.min()
  plotopts['vmax'] = im.max()

# ... otherwise consider the number of arguments
else:
  clipopts = options.clip.split(',')
  
  # two arguments specify minimum and maximum
  if (len(clipopts) == 2):
    plotopts['vmin'] = float(clipopts[0])
    plotopts['vmax'] = float(clipopts[1])
  # one argument specifies equal +/- bounds
  else:
    plotopts['vmax'] = float(clipopts[0])
    plotopts['vmin'] = -plotopts['vmax']

# Check to see if extent is specified; if so, use it, otherwise reproduce
# matplotlib defaults
if (options.extent is None):
  plotopts['extent'] = [-0.5, im.shape[0] - 0.5, im.shape[1] - 0.5, -0.5]
else:
  plotopts['extent'] = [float(item) for item in options.extent.split(',')]

# Check for plot type
if (options.type in plotfunc_mapping):
  plotfunc = plotfunc_mapping[options.type]
else:
  plotfunc = plotfunc_mapping[optdefaults['type']]

# Check for explicit colour bar options
if (options.bar in ['vertical','horizontal']):
  plotbar = True
  barori = options.bar

# ... or their short forms
elif (options.bar.lower() in ['h','v']):
  plotbar = True
  if (options.bar.lower() == 'h'):
    barori = 'horizontal'
  else:
    barori = 'vertical'
    
# and otherwise disable
else:
  plotbar = False

# Set font size for plot labels
if (unicode(options.fontsize).isnumeric()):
  matplotlib.rcParams.update({'font.size': int(options.fontsize)})

plotopts['aspect'] = options.ratio

# Do various different things depending on the type of plot
numcontours = int(options.clevels)
if (options.type == 'contour'):
  plotargs = [im.T, numcontours]
  if (options.ccolour):
    plotopts = modify_contour_args(plotopts)
elif (options.type == 'both'):
  plotargs = [im.T, numcontours] 
else:
  plotargs = [im.T]

# Create the figure and axes
fig = plt.figure()
ax = plt.gca()

# Plot (somehow; could be a composite plot)
plotfunc(*plotargs, **plotopts)

# Check to see if the axis has been inverted yet
if (not ax.yaxis_inverted()):
  ax.invert_yaxis()

# Label plot
plt.xlabel(options.xlabel)
plt.ylabel(options.zlabel)
plt.title(options.title)

# Possibly generate a colour bar and label it
if (plotbar):
  cb = plt.colorbar(orientation=barori)
  cb.set_label(options.cblabel)

plt.show()

